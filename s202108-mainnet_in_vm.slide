# 在 VM 虛擬機建置 Cardano 主網礦池
Cardano 區塊鏈測試鏈
19:30 28 Mar 2020
Tags: golang, go, cht
Summary: This is a great document you want to read.
OldURL: former-path-for-this-doc

陳敬翔
資訊學系培訓師, 中華電信學院
oneleo@cht.com.tw
https://github.com/oneleo
@oneleo760823


// --------------------------------------------------

## 起源

- 有鑑於最近 ADA 幣[價格上漲][1]
- 且可用於建置 [Cardano 礦池的容器][2]在 2021/08/24 有更新
- 所以讓我們跟隨 [Cardano 官方文件][3]學習，在 VM 虛擬機中建置自己的礦池吧！
- 註：本簡報按下鍵盤「N」鍵可觀看註解
- 註：根據 [Cardano 官方建置礦池的守則][4]中提及，若要建置用於可提供服務的礦池，需確定自己符合以下幾點規範：
	- 具備建置、執行、維護 Cardano 節點的能力
	- 可保證 Cardano 節點可連續每天 24 小時 x 每週 7 天 x 每年 365 天不間斷提供服務
	- 具備服務提供系統的操作能力
	- 具備伺服器管理（操作和維護）能力
	- 若具備軟體開發和維運（DevOps）經驗將會非常有幫助
	- 伺服器至少具備 1 組固定的 IPv4 IP、1Gb 網路頻寬、8 GB RAM、24 GB 磁碟空間

[1]: https://www.blocktempo.com/ada-break-ath-after-announcing-the-new-upgrade "兩週暴漲 180%，ADA 再創新高 2.5 鎂！Cardano 9 月將引進智能合約發展 DeFi"
[2]: https://hub.docker.com/r/inputoutput/cardano-node "cardano-node"
[3]: https://docs.cardano.org/getting-started/installing-the-cardano-node "Installing the Cardano node"
[4]: https://docs.cardano.org/getting-started/operating-a-stake-pool/creating-a-stake-pool "Creating a stake pool"

// --------------------------------------------------

## 準備虛擬環境

- 至 [Ubuntu 官網][1] 下載 LTS 長期支援版 iso 映象檔

[1]: https://ubuntu.com/download/desktop "Ubuntu desktop"

.image ./images/i20210831/i20210831.02-ubuntu.png _ 750

// --------------------------------------------------

## 準備虛擬環境

- 確認自己有 VMware Workstation Pro 16 虛擬機軟體 Key 後，至 [VMware 官網](https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html)下載  

.image ./images/i20210831/i20210831.01-workstation.png _ 750

: 補充：若沒有 License Key 的話，可以 Google 關鍵字，說不定會有所收獲。

// --------------------------------------------------

## 準備虛擬環境

- 建置新的 Virtual Machine

.image ./images/i20210831/i20210831.03-newvm.png _ 750

// --------------------------------------------------

## 為避免本簡報過於冗長，這邊只提示幾個建置 VM 的參數

- 伺服器至少要有 8 GB 的 RAM，所以這裡 VM 設定相同資源

.image ./images/i20210831/i20210831.04-ram.png _ 500

// --------------------------------------------------

## 為避免本簡報過於冗長，這邊只提示幾個建置 VM 的參數

- 伺服器需具備 1 組固定的 IPv4 IP，所以 VM 網路使用 bridge 模式（與 Host 宿主主機同一網段）以貼近實際情形

.image ./images/i20210831/i20210831.05-network.png _ 500

// --------------------------------------------------

## 為避免本簡報過於冗長，這邊只提示幾個建置 VM 的參數

- 為貼近真實建置伺服器之情形，所以增加存放 Cardano 資料的磁碟（至少 24 GB）

.image ./images/i20210831/i20210831.06-datadisk.png _ 750

// --------------------------------------------------

## Ubuntu Desktop 安裝完成後先進行更新及必要軟體安裝

- 先使用「Software Update」進行系統更新

.image ./images/i20210831/i20210831.07-update.png _ 950

// --------------------------------------------------

## Ubuntu Desktop 安裝完成後先進行更新及必要軟體安裝

- 再開啟「Terminal」終端機，以使用指令完成必要軟體安裝

.image ./images/i20210831/i20210831.08-terminal.png _ 950

// --------------------------------------------------

## Ubuntu Desktop 安裝完成後先進行更新及必要軟體安裝

1. 更新套件資料庫及進行作業系統相依性更新（指令不包含「$」符號）

	```bash
	$ sudo apt-get update && sudo apt-get -y dist-upgrade && sudo apt-get -y autoremove
	```

2. 安裝 VM 虛擬機的驅動程式

	```bash
	$ sudo apt-get -y install open-vm-tools-desktop
	```

3. 重新開機讓驅動程式生效（接著可將指令用熱鍵「Ctrl + Shift + V」貼入 VM）

	```bash
	$ sudo sync && sudo reboot
	```

4. 再次開啟「Terminal」終端機，安裝 SSH 遠端工具、ufw 簡易防火牆設定工具、nano 文字編輯工具、curl／wget 抓取工具、xfsprogs 磁碟格式化工具、util-linux 通用工具

	```bash
	$ sudo apt-get -y install ssh ufw nano net-tools curl wget xfsprogs util-linux
	```

5. 安裝具 Daemonless、Rootless 特色的 [Podman 容器引擎][1]（下面指令超出部份請觀看此連結）

	```bash
	$ . /etc/os-release
	$ echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
	$ curl -L "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key" | sudo apt-key add -
	$ sudo apt-get update && sudo apt-get -y upgrade
	$ sudo apt-get -y install podman
	```

[1]: https://podman.io/getting-started/installation#ubuntu "Podman"

: 補充：
: 若使用 Ubuntu 20.10 或以上版本，安裝 podman 請直接下 `$ sudo apt-get -y install podman` 指令即可。

: 指令說明：
: 1、【sudo】：使用像是更新等操作需擁有管理者權限來進行，使用時預設需輸入密碼。
: 【apt-get】：Ubuntu 的包裝工具，可使用此來進行更新（update）、安裝套件（install）等動作。
: 【update】：更新套件資料庫。【upgrade】：進行更新。【dist-grade】：進行更新並將相依套件一同安裝。
: 【-y】參數：不再詢問是否需要安裝／更新，一律為 Yes。
: 【&&】符號：若前一個指令順利安裝完成（$? 變數為 0）則繼續執行下一個指令。

// --------------------------------------------------

## 將第二顆磁碟格式化成 xfs 檔案系統以用於儲存 Cardano 節點資料

1. 可視自身需要格式化所需的[檔案系統][1]，格式化 xfs 細節可參考[此網站][2]
2. 找到這顆磁碟（這裡以格式化 sdb 磁碟為例）

	```bash
	$ lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
	```

[1]: https://zh.wikipedia.org/wiki/文件系统的对比 "File System"
[2]: https://docs.microsoft.com/zh-tw/azure/virtual-machines/linux/attach-disk-portal "使用入口網站將資料磁碟附加至 Linux VM"


.image ./images/i20210831/i20210831.09-lsblk.png _ 750

// --------------------------------------------------

## 將第二顆磁碟格式化成 xfs 檔案系統以用於儲存 Cardano 節點資料

3. 將整個 sdb 進行磁碟分割及格式化成 xfs 檔案系統

	```bash
	$ sudo parted /dev/sdb --script mklabel gpt mkpart xfspart xfs 0% 100%
	$ sudo mkfs.xfs /dev/sdb1
	$ sudo partprobe /dev/sdb1
	```

4. 再次查看磁碟列表，可以看到磁碟 sdb1 已順利格式化完成

	```bash
	$ lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
	```

.image ./images/i20210831/i20210831.10-sdb1.png _ 500

// --------------------------------------------------

## 將第二顆磁碟格式化成 xfs 檔案系統以用於儲存 Cardano 節點資料

5. 將 sdb1 磁碟掛載至 /datadrive（位置可視自身情況調整）

	```bash
	$ sudo mkdir -p /datadrive
	$ sudo mount /dev/sdb1 /datadrive
	```

: 指令說明：
: 1、【mkdir】：建立目錄。
: 【-p /A/B/C】：遞迴建立，建立 C 目錄時，若 A 及 B 目錄不存在則一同建置。

6. 設置開機時自動掛載指定 UUID 的磁碟（這邊以自動掛載 /dev/sdb1 為例，並記下專屬於自身情況之 UUID 值）

	```bash
	$ sudo blkid
	```

.image ./images/i20210831/i20210831.11-sdb1uuid.png _ 1000

// --------------------------------------------------

## 將第二顆磁碟格式化成 xfs 檔案系統以用於儲存 Cardano 節點資料

7. 修改開機時自動掛載磁碟列表

	```bash
	$ sudo nano /etc/fstab
	```

8. 在 /etc/fstab 最下方新增 2 列（再使用熱鍵「Ctrl + O」+「Enter」存檔→「Ctrl + X」關閉）

	```
	# /datadrive was on /dev/sdb1 during installation
	UUID=a758e667-6c09-4b13-9471-187d71a313b4	/datadrive	xfs	defaults,nofail	1	2
	```

.image ./images/i20210831/i20210831.12-fstab.png _ 1000

: 註：/etc/fstab 的 dump 與 pass 的設定：
: a、根目錄設定成：1	1
: b、其他設定成：1	2
: c、暫存區設定成：0	2
: d、網路掛載設定成：0	0

// --------------------------------------------------

## 設置 Host 宿主主機防火牆

1. 允許 cardano-node Container 的 3001 Port 進來此 Host 宿主主機

	```bash
	$ sudo ufw allow in 3001
	```

2. 只允許指定網段的電腦透過 SSH（22 port）服務連入此 Host 宿主主機

	```bash
	$ sudo ufw allow in from 192.168.0.0/24 to any port 22
	```

3. 將防火牆設定成預設檔掉其他的進來的連線，只有上述允許的政策才能通過

	```bash
	$ sudo ufw default deny incoming
	```

4. 重新啟動防火牆，並且讓防火牆於開機時啟動

	```bash
	$ sudo ufw enable
	```

5. 設定開機時自動啟動 SSH 服務

	```bash
	$ sudo systemctl enable ssh
	```

// --------------------------------------------------


## 開始建置 Cardano 節點

1. 建立 Cardano 節點會用到的目錄，並更改存取權限

	```bash
	$ sudo mkdir -p /datadrive/cardano-node-data && sudo mkdir -p /datadrive/cardano-node-ipc && sudo mkdir -p /datadrive/cardano-node-bin
	$ sudo chown -R "$USER":"$USER" /datadrive/* && sudo chmod -R 755 /datadrive/*
	```
2. 下載 cardano-node Container Image

	```bash
	$ podman pull docker.io/inputoutput/cardano-node:latest
	$ podman pull docker.io/library/ubuntu:latest
	$ podman pull docker.io/arradev/cardano-node:latest
	$ podman history --no-trunc docker.io/arradev/cardano-node:latest
	$ podman pull docker.io/library/debian:stable-20210408-slim
	$ podman history --no-trunc docker.io/library/debian:stable-20210408-slim


	```

3. 啟動 cardano-node Container

	```bash
	$ podman run -d --restart=always -it -p 3001:3001 --name cardano-node \
	-v /datadrive/cardano-node-ipc:/ipc \
	-v /datadrive/cardano-node-data:/data docker.io/inputoutput/cardano-node:latest
	```

// --------------------------------------------------


## 開始建置 Cardano 節點

4. 除了 Container 內建的 cardano-cli 指令，尚需下載官方編譯好的 [cardano-node][1] 放至 Container 的 /bin 目錄內

	```bash
	$ wget -N https://hydra.iohk.io/job/Cardano/cardano-node/cardano-node-linux/latest-finished/download \
	-O /tmp/cardano-node.tar.gz
	$ sha256sum /tmp/cardano-node.tar.gz
	$ mkdir -p /tmp/cardano-node
	$ tar -zxv -f "/tmp/cardano-node.tar.gz" -C "/tmp/cardano-node"
	// https://ithelp.ithome.com.tw/articles/10238415
	// https://www.coincashew.com/coins/overview-ada/guide-how-to-build-a-haskell-stakepool-node
	// https://github.com/oneleo/PythonSparkMLBookClub/tree/master/Homework-PythonSparkML_08/006-CreateHadoopContainerImage
	// https://docs.docker.com/engine/reference/run/
	// https://docs.cardano.org/getting-started/installing-the-cardano-node
	//$ podman cp /tmp/cardano-node/cardano-node cardano-node:/bin/cardano-node
	```
[1]: https://hydra.iohk.io/job/Cardano/cardano-node/cardano-node-linux/latest-finished "cardano-node-linux"

: 指令說明：
: 1、【chown】：改變目錄或檔案的擁有者及所屬群組。
: 【-R】參數：若是改變目錄的擁有者，則連同子目錄也一同設置。
: 【A:B】：此目錄或檔案的擁有者為 A 及所屬群組為 B。
: 【$USER】：凡使用「$」的字串稱之為變數，$USER 表示目前的使用者，請使用 $ echo $USER 指令查看就會知道。
: 2、【chmod】：改變目錄的存取權限。
: 【700】：照順序對映：擁有者→所屬群組→其他人。
: 【7】的含義：4 + 2 + 1：若允許讀取（r）則加 4，若允許寫入（w）則加 2，若允許執行（x）則加 1。
: 舉例：「700」的含義：擁有者允許讀取、寫入、執行。所屬群組權限全被禁止。其他人權限全被禁止。
: 舉例：「754」的含義：擁有者允許讀取、寫入、執行。所屬群組僅允許讀取、執行，但不能寫入。其他人只允許讀取。
: 3、【podman】：執行軟體貨櫃相關指令。
: 【pull】指令：下載指定的 Docker Image。
: 【A:B】參數：下載 B 版本的 A Docker Image，在這邊是下載最新的（Latest）的 cardano-node 光碟片。
: 4、【docker run】：建立新的 Container。
: 【--restart=always】：記住 Container 目前的執行狀態（啟動或停止），Host 宿主主機重開機後此 Container 會回覆上一階段的執行狀態
: 【--name】：設定 Container 的別名，此別名並非 Container Host Name（Container 本身不會知道此別名，只有 Host 宿主主機才看得到）。
: 【-it】：分配 pseudo-TTY 綁在 Container 的標準輸入上，讓使用者可與之互動。
: 【-d】=【--detach】：Container 建立後即推到背景執行。
: 【-v】參數：volume，把 Host 宿主主機的目錄，掛到（mount）貨櫃主機程式內的 /opt 目錄上，此一行為稱之 Docker 的外掛目錄。
: 【-e】參數：設置 Container 中的環境變數。
: 【-p】參數：將 Host 宿主主機指定的網路埠對映到 Container 內的指定網路埠。
: 5、【wget A】：下載檔案 A。
: 【-O】參數：指定下載檔案的名稱。
: 6、【tar】：解壓縮或壓縮檔案，由後面的參數來決定。
: 【-z】參數：解壓縮或壓縮成 gzip 格式的檔案。
: 【-x】參數：進行解壓縮作業。
: 【-c】參數：進行壓縮作業。
: 【-v】參數：顯示解壓縮或壓縮作業的細節。
: 【-f A】參數：指定要解壓縮或壓縮的檔案 A 或目錄 A。
: 【-C】參數：指定解壓縮或壓縮的目的目錄。

// --------------------------------------------------

## 開始建置 Cardano 節點

5. 查看容器內的 cardano-node 及 cardano-cli 版本

	```bash
	$ podman exec -it cardano-node cardano-node version
	$ podman exec -it cardano-node cardano-cli version
	```

// --------------------------------------------------

// --------------------------------------------------

## 開始建置 Cardano 節點

- 下載官方已編譯好之[最新的 cardano-node 及 cardano-cli][1] 核心元件壓縮檔

	```bash
	$ wget -N https://hydra.iohk.io/job/Cardano/cardano-node/cardano-node-linux/latest-finished/download/1/cardano-node-linux.tar.gz \
	-O /tmp/cardano-node.tar.gz
	```

- 下載後請比對檔案與[官方的 SHA-256 hash 值一致（點選右方的「detail」鈕可查看）][1]

	```bash
	$ sha256sum /tmp/cardano-node.tar.gz
	```

- 解壓縮

	```bash
	$ tar -zxv -f "/tmp/cardano-node.tar.gz" -C "/datadrive/cardano-node-bin"
	```


// --------------------------------------------------

## 開始建置 Cardano 節點

- 建立

```bash
$ podman run -d -it --name cardano --entrypoint bash \
-v /datadrive/cardano-node-ipc:/ipc \
-v /datadrive/cardano-node-data:/data \
docker.io/inputoutput/cardano-node:latest

$ podman run -d -it --name ubuntu  \
-v /datadrive/cardano-node-ipc:/ipc \
-v /datadrive/cardano-node-data:/data \
docker.io/library/ubuntu:latest

$ podman ps -a
```

- 進入

```bash
$ podman exec -it cardano bash
$ podman exec -it ubuntu bash
```

- 把 Container 作為系統服務
- https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/building_running_and_managing_containers/porting-containers-to-systemd-using-podman_building-running-and-managing-containers
- https://www.tutorialworks.com/podman-systemd/

// --------------------------------------------------

## 開始建置 Cardano 節點


- 複製

```bash
mkdir -p /tmp/cardano-node-container
podman cp cardano:/bin /tmp/cardano-node-container/
podman cp cardano:/data /tmp/cardano-node-container/
podman cp cardano:/dev /tmp/cardano-node-container/
podman cp cardano:/etc /tmp/cardano-node-container/
podman cp cardano:/ipc /tmp/cardano-node-container/
podman cp cardano:/lib /tmp/cardano-node-container/
podman cp cardano:/libexec /tmp/cardano-node-container/
podman cp cardano:/nix /tmp/cardano-node-container/
podman cp cardano:/nix-support /tmp/cardano-node-container/
podman cp cardano:/proc /tmp/cardano-node-container/
podman cp cardano:/run /tmp/cardano-node-container/
podman cp cardano:/sbin /tmp/cardano-node-container/
podman cp cardano:/share /tmp/cardano-node-container/
podman cp cardano:/sys /tmp/cardano-node-container/
podman cp cardano:/tmp /tmp/cardano-node-container/

find /tmp/cardano-node-container -name *.json

```

- 刪除

```bash
$ podman rm -f -v cardano ubuntu
```

- 建立 Dockerfile

```bash
$ echo 'FROM docker.io/library/ubuntu:latest
ARG NODE_CONFIG
RUN apt-get update && apt-get -y upgrade && apt-get -y dist-upgrade && apt-get -y install wget tar && \
	mkdir -p "/opt/db/socket" "/opt/configuration" && \
	wget -N "https://hydra.iohk.io/job/Cardano/cardano-node/cardano-node-linux/latest-finished/download/1/cardano-node-linux.tar.gz" -O "/tmp/cardano-node.tar.gz" && \
	wget -N "https://hydra.iohk.io/job/Cardano/iohk-nix/cardano-deployment/latest-finished/download/1/${NODE_CONFIG:-mainnet}-config.json" -P "/opt/configuration/" && \
	wget -N "https://hydra.iohk.io/job/Cardano/iohk-nix/cardano-deployment/latest-finished/download/1/${NODE_CONFIG:-mainnet}-byron-genesis.json" -P "/opt/configuration/" && \
	wget -N "https://hydra.iohk.io/job/Cardano/iohk-nix/cardano-deployment/latest-finished/download/1/${NODE_CONFIG:-mainnet}-shelley-genesis.json" -P "/opt/configuration/" && \
	wget -N "https://hydra.iohk.io/job/Cardano/iohk-nix/cardano-deployment/latest-finished/download/1/${NODE_CONFIG:-mainnet}-topology.json" -P "/opt/configuration/" && \
    tar -zxv -f "/tmp/cardano-node.tar.gz" -C "/usr/local/bin" && \
	mv -f "/usr/local/bin/configuration" "/opt/" && \
    rm -rf "/tmp/cardano-node.tar.gz"'> Dockerfile

podman cp /tmp/cardano-node/cardano-node test:/usr/local/bin/cardano-node
podman cp /tmp/cardano-node/cardano-cli test:/usr/local/bin/cardano-cli


```



[1]: https://hydra.iohk.io/job/Cardano/cardano-node/cardano-node-linux/latest-finished "cardano-node-linux"

// --------------------------------------------------


// --------------------------------------------------


// --------------------------------------------------
